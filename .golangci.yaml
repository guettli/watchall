linters:
  enable-all: true
  disable:
    - depguard
    - lll
    - nlreturn
    - wsl
    - mnd
    - tenv
    - gochecknoinits
    - err113
    - exhaustruct
    - forbidigo
    - gochecknoglobals
    - varnamelen


Welcome
Install
Quick Start
Integrations
FAQ
Usage
Configuration
Linters
False Positives
Product
Thanks
Changelog
Roadmap
Performance
GitHub
Contributing
Quick Start
Workflow
Architecture
New Linters
Debug
FAQ
This Website
Plugins
Module Plugin System
Go Plugin System
© 2025

Linters
Table of Contents
Enabled by Default
Disabled by Default
Linters Configuration
asasalint
bidichk
copyloopvar
cyclop
decorder
depguard
dogsled
dupl
dupword
errcheck
errchkjson
errorlint
exhaustive
exhaustruct
fatcontext
forbidigo
funlen
gci
ginkgolinter
gochecksumtype
gocognit
goconst
gocritic
gocyclo
godot
godox
gofmt
gofumpt
goheader
goimports
gomoddirectives
gomodguard
gosimple
gosec
gosmopolitan
govet
grouper
iface
importas
inamedparam
interfacebloat
ireturn
lll
loggercheck
maintidx
makezero
misspell
mnd
musttag
nakedret
nestif
nilnil
nlreturn
nolintlint
nonamedreturns
paralleltest
perfsprint
prealloc
predeclared
promlinter
protogetter
reassign
recvcheck
revive
rowserrcheck
sloglint
spancheck
staticcheck
stylecheck
tagalign
tagliatelle
tenv
testifylint
testpackage
thelper
usestdlibvars
usetesting
unconvert
unparam
unused
varnamelen
whitespace
wrapcheck
wsl
custom
To see a list of supported linters and which linters are enabled/disabled:

Copy
golangci-lint help linters
Enabled by Default
Name	Description	Presets	AutoFix	Since
errcheck  	Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases.	bugs, error		v1.0.0
gosimple  	Linter for Go source code that specializes in simplifying code.	style	✔	v1.20.0
govet  	Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes.	bugs, metalinter	✔	v1.0.0
ineffassign 	Detects when assignments to existing variables are not used.	unused		v1.0.0
staticcheck  	It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint.	bugs, metalinter	✔	v1.0.0
unused  	Checks Go code for unused constants, variables, functions and types.	unused		v1.20.0
Disabled by Default
Name	Description	Presets	AutoFix	Since
asasalint  	Check for pass []any as any in variadic func(...any).	bugs		v1.47.0
asciicheck 	Checks that all code identifiers does not have non-ASCII symbols in the name.	bugs, style		v1.26.0
bidichk  	Checks for dangerous unicode character sequences.	bugs		v1.43.0
bodyclose 	Checks whether HTTP response body is closed successfully.	performance, bugs		v1.18.0
canonicalheader 	Canonicalheader checks whether net/http.Header uses canonical header.	style	✔	v1.58.0
containedctx 	Containedctx is a linter that detects struct contained context.Context field.	style		v1.44.0
contextcheck 	Check whether the function uses a non-inherited context.	bugs		v1.43.0
copyloopvar  	A linter detects places where loop variables are copied.	style	✔	v1.57.0
cyclop  	Checks function and package cyclomatic complexity.	complexity		v1.37.0
decorder  	Check declaration order and count of types, constants, variables and functions.	style		v1.44.0
depguard  	Go linter that checks if package imports are in a list of acceptable packages.	style, import, module		v1.4.0
dogsled  	Checks assignments with too many blank identifiers (e.g. x, , , _, := f()).	style		v1.19.0
dupl  	Tool for code clone detection.	style		v1.0.0
dupword  	Checks for duplicate words in the source code.	comment	✔	v1.50.0
durationcheck 	Check for two durations multiplied together.	bugs		v1.37.0
err113 	Go linter to check the errors handling expressions.	style, error	✔	v1.26.0
errchkjson  	Checks types passed to the json encoding functions. Reports unsupported types and reports occurrences where the check for the returned error can be omitted.	bugs		v1.44.0
errname 	Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.	style		v1.42.0
errorlint  	Errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.	bugs, error	✔	v1.32.0
exhaustive  	Check exhaustiveness of enum switch statements.	bugs		v1.28.0
exhaustruct  	Checks if all structure fields are initialized.	style, test		v1.46.0
exptostd 	Detects functions from golang.org/x/exp/ that can be replaced by std functions.	style	✔	v1.63.0
fatcontext  	Detects nested contexts in loops and function literals.	performance	✔	v1.58.0
forbidigo  	Forbids identifiers.	style		v1.34.0
forcetypeassert 	Finds forced type assertions.	style		v1.38.0
funlen  	Checks for long functions.	complexity		v1.18.0
gci  	Checks if code and import statements are formatted, with additional rules.	format, import	✔	v1.30.0
ginkgolinter  	Enforces standards of using ginkgo and gomega.	style	✔	v1.51.0
gocheckcompilerdirectives 	Checks that go compiler directive comments (//go:) are valid.	bugs		v1.51.0
gochecknoglobals 	Check that no global variables exist.	style		v1.12.0
gochecknoinits	Checks that no init functions are present in Go code.	style		v1.12.0
gochecksumtype  	Run exhaustiveness checks on Go "sum types".	bugs		v1.55.0
gocognit  	Computes and checks the cognitive complexity of functions.	complexity		v1.20.0
goconst  	Finds repeated strings that could be replaced by a constant.	style		v1.0.0
gocritic  	Provides diagnostics that check for bugs, performance and style issues.
Extensible without recompilation through dynamic rules.
Dynamic rules are written declaratively with AST patterns, filters, report message and optional suggestion.	style, metalinter	✔	v1.12.0
gocyclo  	Computes and checks the cyclomatic complexity of functions.	complexity		v1.0.0
godot  	Check if comments end in a period.	style, comment	✔	v1.25.0
godox  	Detects usage of FIXME, TODO and other keywords inside comments.	style, comment		v1.19.0
gofmt  	Checks if the code is formatted according to 'gofmt' command.	format	✔	v1.0.0
gofumpt  	Checks if code and import statements are formatted, with additional rules.	format	✔	v1.28.0
goheader  	Checks if file header matches to pattern.	style	✔	v1.28.0
goimports  	Checks if the code and import statements are formatted according to the 'goimports' command.	format, import	✔	v1.20.0
gomoddirectives  	Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.	style, module		v1.39.0
gomodguard  	Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.	style, import, module		v1.25.0
goprintffuncname 	Checks that printf-like functions are named with f at the end.	style		v1.23.0
gosec  	Inspects source code for security problems.	bugs		v1.0.0
gosmopolitan  	Report certain i18n/l10n anti-patterns in your Go codebase.	bugs		v1.53.0
grouper  	Analyze expression groups.	style		v1.44.0
iface  	Detect the incorrect use of interfaces, helping developers avoid interface pollution.	style	✔	v1.62.0
importas  	Enforces consistent import aliases.	style	✔	v1.38.0
inamedparam  	Reports interfaces with unnamed method parameters.	style		v1.55.0
interfacebloat  	A linter that checks the number of methods inside an interface.	style		v1.49.0
intrange 	Intrange is a linter to find places where for loops could make use of an integer range.	style	✔	v1.57.0
ireturn  	Accept Interfaces, Return Concrete Types.	style		v1.43.0
lll 	Reports long lines.	style		v1.8.0
loggercheck  	Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).	style, bugs		v1.49.0
maintidx  	Maintidx measures the maintainability index of each function.	complexity		v1.44.0
makezero  	Finds slice declarations with non-zero initial length.	style, bugs		v1.34.0
mirror 	Reports wrong mirror patterns of bytes/strings usage.	style	✔	v1.53.0
misspell  	Finds commonly misspelled English words.	style, comment	✔	v1.8.0
mnd  	An analyzer to detect magic numbers.	style		v1.22.0
musttag  	Enforce field tags in (un)marshaled structs.	style, bugs		v1.51.0
nakedret  	Checks that functions with naked returns are not longer than a maximum size (can be zero).	style	✔	v1.19.0
nestif  	Reports deeply nested if statements.	complexity		v1.25.0
nilerr 	Finds the code that returns nil even if it checks that the error is not nil.	bugs		v1.38.0
nilnesserr 	Reports constructs that checks for err != nil, but returns a different nil value error.
Powered by nilness and nilerr.	bugs		v1.63.0
nilnil  	Checks that there is no simultaneous return of nil error and an invalid value.	style		v1.43.0
nlreturn  	Nlreturn checks for a new line before return and branch statements to increase code clarity.	style	✔	v1.30.0
noctx 	Finds sending http request without context.Context.	performance, bugs		v1.28.0
nolintlint  	Reports ill-formed or insufficient nolint directives.	style	✔	v1.26.0
nonamedreturns  	Reports all named returns.	style		v1.46.0
nosprintfhostport 	Checks for misuse of Sprintf to construct a host with port in a URL.	style		v1.46.0
paralleltest  	Detects missing usage of t.Parallel() method in your Go test.	style, test		v1.33.0
perfsprint  	Checks that fmt.Sprintf can be replaced with a faster alternative.	performance	✔	v1.55.0
prealloc  	Finds slice declarations that could potentially be pre-allocated.	performance		v1.19.0
predeclared  	Find code that shadows one of Go's predeclared identifiers.	style		v1.35.0
promlinter  	Check Prometheus metrics naming via promlint.	style		v1.40.0
protogetter  	Reports direct reads from proto message fields when getters should be used.	bugs	✔	v1.55.0
reassign  	Checks that package variables are not reassigned.	bugs		v1.49.0
recvcheck  	Checks for receiver type consistency.	bugs		v1.62.0
revive  	Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.	style, metalinter	✔	v1.37.0
rowserrcheck  	Checks whether Rows.Err of rows is checked successfully.	bugs, sql		v1.23.0
sloglint  	Ensure consistent code style when using log/slog.	style		v1.55.0
spancheck  	Checks for mistakes with OpenTelemetry/Census spans.	bugs		v1.56.0
sqlclosecheck 	Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed.	bugs, sql		v1.28.0
stylecheck  	Stylecheck is a replacement for golint.	style	✔	v1.20.0
tagalign  	Check that struct tags are well aligned.	style	✔	v1.53.0
tagliatelle  	Checks the struct tags.	style		v1.40.0
testableexamples 	Linter checks if examples are testable (have an expected output).	test		v1.50.0
testifylint  	Checks usage of github.com/stretchr/testify.	test, bugs	✔	v1.55.0
testpackage  	Linter that makes you use a separate _test package.	style, test		v1.25.0
thelper  	Thelper detects tests helpers which is not start with t.Helper() method.	test		v1.34.0
tparallel 	Tparallel detects inappropriate usage of t.Parallel() method in your Go test codes.	style, test		v1.32.0
unconvert  	Remove unnecessary type conversions.	style		v1.0.0
unparam  	Reports unused function parameters.	unused		v1.9.0
usestdlibvars  	A linter that detect the possibility to use variables/constants from the Go standard library.	style	✔	v1.48.0
usetesting  	Reports uses of functions with replacement inside the testing package.	test	✔	v1.63.0
varnamelen  	Checks that the length of a variable's name matches its scope.	style		v1.43.0
wastedassign 	Finds wasted assignment statements.	style		v1.38.0
whitespace  	Whitespace is a linter that checks for unnecessary newlines at the start and end of functions, if, for, etc.	style	✔	v1.19.0
wrapcheck  	Checks that errors returned from external packages are wrapped.	style, error		v1.32.0
wsl  	Add or remove empty lines.	style	✔	v1.20.0
zerologlint 	Detects the wrong usage of zerolog that a user forgets to dispatch with Send or Msg.	bugs		v1.53.0
tenv  ⚠	Duplicate feature another linter. Replaced by usetesting.	test		v1.43.0
Linters Configuration
asasalint
Check for pass []any as any in variadic func(...any).

Copy
linters-settings:
  asasalint:
    # To specify a set of function names to exclude.
    # The values are merged with the builtin exclusions.
    # The builtin exclusions can be disabled by setting `use-builtin-exclusions` to `false`.
    # Default: ["^(fmt|log|logger|t|)\.(Print|Fprint|Sprint|Fatal|Panic|Error|Warn|Warning|Info|Debug|Log)(|f|ln)$"]
    exclude:
      - Append
      - \.Wrapf
    # To enable/disable the asasalint builtin exclusions of function names.
    # See the default value of `exclude` to get the builtin exclusions.
    # Default: true
    use-builtin-exclusions: false
    # Ignore *_test.go files.
    # Default: false
    ignore-test: true

bidichk
Checks for dangerous unicode character sequences.

Copy
linters-settings:
  bidichk:
    # The following configurations check for all mentioned invisible Unicode runes.
    # All runes are enabled by default.
    left-to-right-embedding: false
    right-to-left-embedding: false
    pop-directional-formatting: false
    left-to-right-override: false
    right-to-left-override: false
    left-to-right-isolate: false
    right-to-left-isolate: false
    first-strong-isolate: false
    pop-directional-isolate: false

linters-settings:
  cyclop:
    max-complexity: 15
